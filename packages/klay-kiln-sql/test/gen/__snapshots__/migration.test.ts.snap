// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`lib/gen/migration.ts #createNewMigrationFile should create a fresh migration file 1`] = `
"module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('users', {
      id: {
        primaryKey: true,
        allowNull: false,
        autoIncrement: true,
        type: Sequelize.BIGINT
      },
      age: Sequelize.BIGINT,
      isAdmin: Sequelize.BOOLEAN,
      email: Sequelize.STRING(250),
      password: Sequelize.STRING(32),
      firstName: Sequelize.STRING(100),
      lastName: Sequelize.STRING(100),
      createdAt: Sequelize.DATE(6),
      updatedAt: Sequelize.DATE(6)
      })
    await queryInterface.addIndex('users', {'name':'users_unique_email','unique':true,'fields':['email']})
    await queryInterface.addIndex('users', {'name':'users_unique_firstname_lastname','unique':true,'fields':['firstName','lastName']})
    await queryInterface.addIndex('users', {'name':'users_email_asc__password_asc','fields':[{'attribute':'email','order':'ASC'},{'attribute':'password','order':'ASC'}]})
    await queryInterface.createTable('photos', {
      id: {
        primaryKey: true,
        allowNull: false,
        type: Sequelize.UUID
      },
      ownerId: {
        references: {
          key: 'id',
          model: 'users'
        },
        type: Sequelize.BIGINT
      },
      aspectRatio: Sequelize.DOUBLE,
      metadata: Sequelize.TEXT,
      createdAt: Sequelize.DATE(6),
      updatedAt: Sequelize.DATE(6)
      })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('photos')
    await queryInterface.removeIndex('users', 'users_email_asc__password_asc')
    await queryInterface.removeIndex('users', 'users_unique_firstname_lastname')
    await queryInterface.removeIndex('users', 'users_unique_email')
    await queryInterface.dropTable('users')
  },
}"
`;

exports[`lib/gen/migration.ts #createNewMigrationFile should create an incremental migration file 1`] = `
"module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.addColumn('users', 'id', {
        primaryKey: true,
        allowNull: false,
        autoIncrement: true,
        type: Sequelize.BIGINT
      })
    await queryInterface.addColumn('users', 'isAdmin', Sequelize.BOOLEAN)
    await queryInterface.addColumn('users', 'email', Sequelize.STRING(250))
    await queryInterface.addColumn('users', 'password', Sequelize.STRING(32))
    await queryInterface.addColumn('users', 'firstName', Sequelize.STRING(100))
    await queryInterface.addColumn('users', 'lastName', Sequelize.STRING(100))
    await queryInterface.addColumn('users', 'createdAt', Sequelize.DATE(6))
    await queryInterface.addColumn('users', 'updatedAt', Sequelize.DATE(6))
    await queryInterface.addIndex('users', {'name':'users_unique_firstname_lastname','unique':true,'fields':['firstName','lastName']})
    await queryInterface.addIndex('users', {'name':'users_email_asc__password_asc','fields':[{'attribute':'email','order':'ASC'},{'attribute':'password','order':'ASC'}]})
    await queryInterface.createTable('photos', {
      id: {
        primaryKey: true,
        allowNull: false,
        type: Sequelize.UUID
      },
      ownerId: {
        references: {
          key: 'id',
          model: 'users'
        },
        type: Sequelize.BIGINT
      },
      aspectRatio: Sequelize.DOUBLE,
      metadata: Sequelize.TEXT,
      createdAt: Sequelize.DATE(6),
      updatedAt: Sequelize.DATE(6)
      })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('photos')
    await queryInterface.removeIndex('users', 'users_email_asc__password_asc')
    await queryInterface.removeIndex('users', 'users_unique_firstname_lastname')
    await queryInterface.removeColumn('users', 'updatedAt')
    await queryInterface.removeColumn('users', 'createdAt')
    await queryInterface.removeColumn('users', 'lastName')
    await queryInterface.removeColumn('users', 'firstName')
    await queryInterface.removeColumn('users', 'password')
    await queryInterface.removeColumn('users', 'email')
    await queryInterface.removeColumn('users', 'isAdmin')
    await queryInterface.removeColumn('users', 'id')
  },
}"
`;
